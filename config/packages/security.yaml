security:
    enable_authenticator_manager : true #7/oct
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'argon2i'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: Symfony6\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider #7/oct
            json_login:
                check_path: /api/login_check
                username_path: email
                success_handler: sirhplus.authentication.success_handler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api_docs:
            pattern: ^/api/(docs)
            stateless: true

        api:
            pattern: ^/api
            stateless: true
            entry_point: jwt
            json_login:
                check_path: /api/login # or, if you have defined a route for your login path, the route name you used
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh # or, you may use the `api_refresh_token` route name
                provider: app_user_provider #7/octapp_user_provider
#                provider: user_provider_service_id #7/octapp_user_provider

        # ...
        #7/oct
#        logout:
#            path: api_token_invalidate
        #7/oct
#        myfirewall:
#            logout:
#                path: api_token_invalidate

    role_hierarchy:
        ROLE_USER:        ['ROLE_USER']
        ROLE_TEAM_RESPONSIBILITY: ['ROLE_TEAM_RESPONSIBILITY', 'ROLE_USER']
        ROLE_ADMIN:       ['ROLE_ADMIN', 'ROLE_TEAM_RESPONSIBILITY', 'ROLE_USER']
        ROLE_OWNER:       ['ROLE_OWNER', 'ROLE_ADMIN', 'ROLE_TEAM_RESPONSIBILITY', 'ROLE_USER']
        ROLE_SUPER_ADMIN: ['ROLE_SUPER_ADMIN', 'ROLE_OWNER', 'ROLE_ADMIN', 'ROLE_TEAM_RESPONSIBILITY', 'ROLE_USER']


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/docs,  roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }

    #Extracteur de jeton 7/oct
#    App\Request\Extractor\HeaderExtractor:
#        tags:
#            - { name: gesdinet_jwt_refresh_token.request_extractor }
#            - { name: gesdinet_jwt_refresh_token.request_extractor, priority: 25 }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
